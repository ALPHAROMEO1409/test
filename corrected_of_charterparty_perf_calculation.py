# -*- coding: utf-8 -*-
"""Corrected of Charterparty perf calculation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_LRvSjYml-vAX52SWHszfulEzXDCywQE
"""

import pandas as pd

# =========================
# Input Parameters
# =========================
warranted_speed = 13.0  # knots
warranted_consumption = 19.9 # MT/day
fuel_tolerance_percent = 5.0  # %
speed_tolerance_knots = 0.5  # knots

# =========================
# Load Data
# =========================
df = pd.read_excel("/content/sample_data/cp SAMPLE DATA for  .xlsx")  # Replace with actual filename

# Filter relevant rows: NOON AT SEA, COSP, and EOSP
df = df[df['event_type'].isin(['NOON AT SEA', 'COSP', 'EOSP'])]

# Ensure numeric types for calculations
df['distance_travelled_actual'] = pd.to_numeric(df['distance_travelled_actual'], errors='coerce')
df['steaming_time_hrs'] = pd.to_numeric(df['steaming_time_hrs'], errors='coerce')
df['me_fuel_consumed'] = pd.to_numeric(df['me_fuel_consumed'], errors='coerce')

# =========================
# Total Metrics
# =========================
total_distance = df['distance_travelled_actual'].sum()
total_time = df['steaming_time_hrs'].sum()
total_fuel = df['me_fuel_consumed'].sum()
voyage_avg_speed = total_distance / total_time if total_time else 0

# =========================
# Good and Bad Weather Segmentation
# =========================
good_days = df[df['day_status'] == 'GOOD WEATHER DAY']
bad_days = df[df['day_status'] == 'BAD WEATHER DAY']

# Good Weather Metrics
good_distance = good_days['distance_travelled_actual'].sum()
good_time = good_days['steaming_time_hrs'].sum()
good_fuel = good_days['me_fuel_consumed'].sum()
good_speed = good_distance / good_time if good_time else 0
good_fo_hr = good_fuel / good_time if good_time else 0
good_fo_day = good_fo_hr * 24

# Bad Weather Metrics
bad_distance = bad_days['distance_travelled_actual'].sum()
bad_time = bad_days['steaming_time_hrs'].sum()
bad_fuel = bad_days['me_fuel_consumed'].sum()
bad_speed = bad_distance / bad_time if bad_time else 0

# =========================
# Warranted Calculations
# =========================
fuel_tolerance_mt = warranted_consumption * (fuel_tolerance_percent / 100)
warranted_plus_tol = warranted_consumption + fuel_tolerance_mt
warranted_minus_tol = warranted_consumption - fuel_tolerance_mt

# Entire Voyage Consumption Using Good Weather Consumption (c)
entire_voyage_good_weather_based = (total_distance / good_speed) * (good_fo_day / 24) if good_speed else 0

# Maximum and Minimum Warranted Fuel
max_warranted_cons = (total_distance / (good_speed if good_speed<warranted_speed+speed_tolerance_knots and good_speed>warranted_speed-speed_tolerance_knots else warranted_speed+speed_tolerance_knots if good_speed>warranted_speed+speed_tolerance_knots else warranted_speed-speed_tolerance_knots )) * (warranted_plus_tol / 24)
min_warranted_cons = (total_distance / (good_speed if good_speed<warranted_speed+speed_tolerance_knots and good_speed>warranted_speed-speed_tolerance_knots else warranted_speed+speed_tolerance_knots if good_speed>warranted_speed+speed_tolerance_knots else warranted_speed-speed_tolerance_knots)) * (warranted_minus_tol / 24)

# Overconsumption and Saving (based on good weather based consumption)
fuel_overconsumption = (entire_voyage_good_weather_based - max_warranted_cons)if entire_voyage_good_weather_based>max_warranted_cons else 0
fuel_saving = (entire_voyage_good_weather_based - min_warranted_cons)if entire_voyage_good_weather_based<min_warranted_cons else 0

# Time Estimates for reference
time_at_good_spd = total_distance / (good_speed if good_speed<warranted_speed+speed_tolerance_knots and good_speed>warranted_speed-speed_tolerance_knots else warranted_speed+speed_tolerance_knots if good_speed>warranted_speed+speed_tolerance_knots else warranted_speed-speed_tolerance_knots)
max_time = total_distance / (warranted_speed - speed_tolerance_knots)
min_time = total_distance / (warranted_speed + speed_tolerance_knots)
time_gained = (min_time - time_at_good_spd)if time_at_good_spd<min_time else 0
time_lost = (time_at_good_spd - max_time)if time_at_good_spd>max_time else 0

# =========================
# Report Summary
# =========================
summary = pd.DataFrame({
    "Metric": [
        "Total Distance (nm)",
        "Total Steaming Time (hrs)",
        "Voyage Avg Speed (knots)",
        "Good Wx Distance (nm)",
        "Good Wx Time (hrs)",
        "Good Wx Speed (knots)",
        "Good Wx FO Cons (MT)",
        "Good Wx FO Rate (MT/hr)",
        "Good Wx FO Rate (MT/day)",
        "Bad Wx Distance (nm)",
        "Bad Wx Time (hrs)",
        "Bad Wx FO Cons (MT)",
        "Bad Wx Speed (knots)",
        "Total ME Fuel (MT)",
        "Entire Voyage Cons (MT) via Good Wx Perf",
        "Max Warranted FO (MT)",
        "Min Warranted FO (MT)",
        "Fuel Overconsumption (MT)",
        "Fuel Saving (MT)",
        "Time @ Good Wx Speed (hrs)",
        "Max Time @ Warranted Spd (hrs)",
        "Min Time @ Warranted Spd (hrs)",
        "Time Gained (hrs)",
        "Time Lost (hrs)"
    ],
    "Value": [
        total_distance,
        total_time,
        round(voyage_avg_speed, 2),
        good_distance,
        good_time,
        round(good_speed, 2),
        round(good_fuel, 2),
        round(good_fo_hr, 3),
        round(good_fo_day, 3),
        bad_distance,
        bad_time,
        round(bad_fuel, 2),
        round(bad_speed, 2),
        round(total_fuel, 2),
        round(entire_voyage_good_weather_based, 2),
        round(max_warranted_cons, 2),
        round(min_warranted_cons, 2),
        round(fuel_overconsumption, 2),
        round(fuel_saving, 2),
        round(time_at_good_spd, 2),
        round(max_time, 2),
        round(min_time, 2),
        round(time_gained, 2),
        round(time_lost, 2)
    ]
})

# Optional: Export to Excel
# summary.to_excel("voyage_performance_report.xlsx", index=False)

print(summary)